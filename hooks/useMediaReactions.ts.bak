import { useState, useCallback, useRef, useEffect, useMemo } from "react";
import { ClientPostMediaItem } from "../types/posts";
import { ReactionType } from "../components/ReactionSelector";

interface UseMediaReactionsProps {
  mediaItems: ClientPostMediaItem[];
  apiBaseUrl: string;
  authToken?: string | null;
  onMediaReactionUpdate?: (
    mediaId: string,
    reactionCounts: Record<ReactionType, number>,
    userReaction: ReactionType | null
  ) => void;
}

const useMediaReactions = ({
  mediaItems,
  apiBaseUrl,
  authToken,
  onMediaReactionUpdate,
}: UseMediaReactionsProps) => {
  // State for user reactions on media items
  const [userMediaReactions, setUserMediaReactions] = useState<
    Record<string, ReactionType | null>
  >({});

  // State for reaction counts (both server-confirmed and optimistic)
  const [mediaReactionCounts, setMediaReactionCounts] = useState<
    Record<string, Record<ReactionType, number>>
  >({});

  // State for temporary optimistic reaction counts
  const [optimisticMediaReactionCounts, setOptimisticMediaReactionCounts] =
    useState<Record<string, Record<ReactionType, number>>>({});

  // Track the last activated media ID to prevent race conditions
  const lastMediaIdRef = useRef<string | null>(null);

  // Memoize list of media IDs with optimistic updates
  const optimisticMediaIds = useMemo(
    () => Object.keys(optimisticMediaReactionCounts),
    [optimisticMediaReactionCounts]
  );

  // Initialize media reactions from mediaItems
  useEffect(() => {
    // Skip effect if no media items
    if (!mediaItems.length) return;

    // Extract user reactions from media items
    const initialUserReactions: Record<string, ReactionType | null> = {};
    const initialReactionCounts: Record<
      string,
      Record<ReactionType, number>
    > = {};

    mediaItems.forEach((media) => {
      if (media.id) {
        // Set user reaction if available
        if (media.userReaction) {
          initialUserReactions[media.id] = media.userReaction;
        }

        // Set reaction counts if available
        if (media.reactionCounts) {
          initialReactionCounts[media.id] = media.reactionCounts;
        }
      }
    });

    // Only update state if we have data and it's different from current state
    if (Object.keys(initialUserReactions).length > 0) {
      // Compare with current state to avoid unnecessary updates
      setUserMediaReactions((prevState) => {
        const newState = { ...prevState };

        // Only update reactions for media that don't have optimistic updates pending
        Object.keys(initialUserReactions).forEach((id) => {
          if (!optimisticMediaIds.includes(id)) {
            newState[id] = initialUserReactions[id];
          }
        });

        return newState;
      });
    }

    if (Object.keys(initialReactionCounts).length > 0) {
      // Compare with current state to avoid unnecessary updates
      setMediaReactionCounts((prevState) => {
        const newState = { ...prevState };

        // Only update counts for media that don't have optimistic updates pending
        Object.keys(initialReactionCounts).forEach((id) => {
          if (!optimisticMediaIds.includes(id)) {
            newState[id] = initialReactionCounts[id];
          }
        });

        return newState;
      });
    }
  }, [mediaItems, optimisticMediaIds]);

  // Handle selecting a reaction for media
  const handleMediaReactionSelect = useCallback(
    async (mediaId: string, reaction: ReactionType | null) => {
      // Check if we have the required dependencies
      if (!apiBaseUrl || !mediaId) {
        console.error("API Base URL or Media ID is not available!");
        return;
      }

      const mediaItem = mediaItems.find((m) => m.id === mediaId);
      if (!mediaItem) return;

      const previousReaction = userMediaReactions[mediaId];
      const newReaction = reaction;

      // --- Optimistic UI Update ---
      setUserMediaReactions((prev) => ({ ...prev, [mediaId]: newReaction }));

      // Calculate and set optimistic counts
      const currentCounts = mediaReactionCounts[mediaId] ?? {};
      const updatedCounts = { ...currentCounts };

      // Decrement previous reaction count if it existed
      if (previousReaction && updatedCounts[previousReaction]) {
        updatedCounts[previousReaction] = Math.max(
          0,
          updatedCounts[previousReaction] - 1
        );
      }
      // Increment new reaction count if it exists
      if (newReaction) {
        updatedCounts[newReaction] = (updatedCounts[newReaction] || 0) + 1;
      }
      setOptimisticMediaReactionCounts((prev) => ({
        ...prev,
        [mediaId]: updatedCounts,
      }));
      // --- End Optimistic UI Update ---

      // --- Server Request ---
      try {
        const response = await fetch(
          `${apiBaseUrl}/api/posts/media/${mediaId}/reactions`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: authToken ? `Bearer ${authToken}` : "",
            },
            body: JSON.stringify({ reactionType: reaction }),
          }
        );

        if (!response.ok) {
          console.error(
            "Server failed to update media reaction. Reverting UI."
          );
          // Revert local optimistic state
          setUserMediaReactions((prev) => ({
            ...prev,
            [mediaId]: previousReaction,
          }));
          // Clear optimistic counts
          setOptimisticMediaReactionCounts((prev) => {
            const newState = { ...prev };
            delete newState[mediaId];
            return newState;
          });

          const errorData = await response.json().catch(() => ({}));
          throw new Error(
            errorData.error ||
              `Failed to save media reaction. Status: ${response.status}`
          );
        }

        // --- Process successful response ---
        const updatedData = await response.json();

        if (
          updatedData &&
          updatedData.reactionCounts !== undefined &&
          updatedData.userReaction !== undefined
        ) {
          console.log("Server response for media reaction:", {
            mediaId,
            userReaction: updatedData.userReaction,
            reactionCounts: updatedData.reactionCounts,
          });

          // Update our internal state with server-confirmed data
          setUserMediaReactions((prev) => ({
            ...prev,
            [mediaId]: updatedData.userReaction,
          }));

          setMediaReactionCounts((prev) => ({
            ...prev,
            [mediaId]: updatedData.reactionCounts,
          }));

          // Trigger parent component to update if callback exists
          onMediaReactionUpdate?.(
            mediaId,
            updatedData.reactionCounts,
            updatedData.userReaction
          );

          // Clear optimistic counts after a small delay to ensure UI stability
          setTimeout(() => {
            setOptimisticMediaReactionCounts((prev) => {
              const newState = { ...prev };
              delete newState[mediaId];
              return newState;
            });
          }, 500);

          // Log successful update for debugging
          console.log(`Media reaction updated: ${mediaId}`, updatedData);
        }
      } catch (error) {
        console.error("Error saving media reaction:", error);
        // Revert local optimistic state
        setUserMediaReactions((prev) => ({
          ...prev,
          [mediaId]: previousReaction,
        }));
        // Clear optimistic counts
        setOptimisticMediaReactionCounts((prev) => {
          const newState = { ...prev };
          delete newState[mediaId];
          return newState;
        });
      }
    },
    [
      mediaItems,
      onMediaReactionUpdate,
      optimisticMediaReactionCounts,
      mediaReactionCounts,
      userMediaReactions,
      authToken,
      apiBaseUrl,
    ]
  );

  return {
    userMediaReactions,
    // Return a combined object of confirmed and optimistic counts
    // Optimistic counts take precedence during updates
    optimisticMediaReactionCounts: Object.keys(
      optimisticMediaReactionCounts
    ).reduce(
      (acc, mediaId) => {
        acc[mediaId] = optimisticMediaReactionCounts[mediaId];
        return acc;
      },
      { ...mediaReactionCounts }
    ),
    handleMediaReactionSelect,
  };
};

export default useMediaReactions;
